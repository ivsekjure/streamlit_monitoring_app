CREATE OR REPLACE PROCEDURE MONITORING.MONITORING_SCHEMA.TOP_50_LONGEST_QUERIES()
RETURNS TABLE ("YEAR_MONTH_WEEK" VARCHAR, "WAREHOUSE_NAME" VARCHAR, "QUERY_ID" VARCHAR, "QUERY_TEXT" VARCHAR, "USER_NAME" VARCHAR, "QUERY_EXECUTION_TIME_MINUTES" FLOAT, "PARTITIONS_SCANNED" NUMBER(38,0), "PARITITIONS_TOTAL" NUMBER(38,0), "PCN_SCANNED" FLOAT, "EXECUTION_TIME_MINUTES" FLOAT)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
 LET results RESULTSET := (
    with data as(
     select
           YEAR(START_TIME) ||''-''|| LPAD(MONTH(START_TIME),2 , ''0'') ||''-''|| LPAD(WEEK(START_TIME),2 , ''0'') as YEAR_MONTH_WEEK
         , WAREHOUSE_NAME
         , QUERY_ID
         , QUERY_TEXT
         , USER_NAME
         , TOTAL_ELAPSED_TIME/(1000*60)::FLOAT AS QUERY_EXECUTION_TIME_MINUTES
         , PARTITIONS_SCANNED
         , PARTITIONS_TOTAL
         , case when PARTITIONS_TOTAL is not null and PARTITIONS_TOTAL > 0 then PARTITIONS_SCANNED / PARTITIONS_TOTAL else 0 end::FLOAT as PCN_SCANNED
     from SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
     where 1=1
         and TO_DATE(START_TIME) >     DATEADD(month,-5,TO_DATE(CURRENT_TIMESTAMP())) 
         and TOTAL_ELAPSED_TIME > 0 --only get queries that actually used compute
         and ERROR_CODE is NULL
         and PARTITIONS_SCANNED is not null
    )
    select *, sum(QUERY_EXECUTION_TIME_MINUTES) over(partition by YEAR_MONTH_WEEK, USER_NAME)::FLOAT as EXECUTION_TIME_MINUTES
    from data
    qualify  50 >= dense_rank() over(partition by YEAR_MONTH_WEEK order by QUERY_EXECUTION_TIME_MINUTES desc)
    );

    RETURN TABLE(results);
END;
';